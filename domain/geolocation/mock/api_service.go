// Code generated by MockGen. DO NOT EDIT.
// Source: go-ddd/domain/geolocation (interfaces: ApiService)

// Package mock is a generated GoMock package.
package mock

import (
	geolocation "go-ddd/domain/geolocation"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockApiService is a mock of ApiService interface.
type MockApiService struct {
	ctrl     *gomock.Controller
	recorder *MockApiServiceMockRecorder
}

// MockApiServiceMockRecorder is the mock recorder for MockApiService.
type MockApiServiceMockRecorder struct {
	mock *MockApiService
}

// NewMockApiService creates a new mock instance.
func NewMockApiService(ctrl *gomock.Controller) *MockApiService {
	mock := &MockApiService{ctrl: ctrl}
	mock.recorder = &MockApiServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiService) EXPECT() *MockApiServiceMockRecorder {
	return m.recorder
}

// GetLocationDataForIP mocks base method.
func (m *MockApiService) GetLocationDataForIP(arg0 string) ([]geolocation.GeoData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationDataForIP", arg0)
	ret0, _ := ret[0].([]geolocation.GeoData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationDataForIP indicates an expected call of GetLocationDataForIP.
func (mr *MockApiServiceMockRecorder) GetLocationDataForIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationDataForIP", reflect.TypeOf((*MockApiService)(nil).GetLocationDataForIP), arg0)
}
